trigger:
  branches:
    include:
      - develop
      - stage
      - master
  paths:
    exclude:
      - .devops/adm-rg.bicep
      - .devops/app-rg.bicep
      - .devops/site-build.bicep
      - .devops/role-assign.bicep
      - .devops/container/drupal-nginx-fpm/0.6
      - .devops/container/nginx-fpm
      - .devops/pipeline/_provision-app-service.yml
      - .devops/pipeline/azure-pipelines-infrastructure.yml
      - .devops/pipeline/azure-pipelines-release-infrastructure.yml
      - .devops/pipeline/azure-pipelines-reverse-proxy.yml
      - .devops/reverseProxy

resources:
  - repo: self

pool:
  vmImage: 'ubuntu-20.04'

name: $(Build.BuildId)

parameters:
  - name: sites_1
    type: object
    default:
      - sacramento|1|150
      - stanislaus|1|151
  - name: sites_2
    type: object
    default:
      - sierra|1|152
      - sanbenito|1|153
  - name: sites_3
    type: object
    default:
      - riverside|2|250
      - partners|2|251
  - name: sites_4
    type: object
    default:
      - madera|2|252
      - napa|2|253
  - name: sites_5
    type: object
    default:
      - kern|3|350
      - tularesuperiorcourt|3|351
  - name: sites_6
    type: object
    default:
      - colusa|3|352
      - modoc|3|353

variables:
  imageRepository: 'build/trialcourt/$(Build.SourceBranchName)'
  dockerfilePath: '$(Build.SourcesDirectory)/.devops/container/drupal-nginx-fpm/0.6-devops/Dockerfile'
  dockerRegistryServiceConnection: 'Global Container Registry1'
  containerRegistry: 'globalctcmscr.azurecr.io'
  tag: 'build_$(Build.BuildId)-$(Build.SourceVersion)'
  gitRepo: 'https://github.com/judicialcouncilcalifornia/trialcourt.git'
  phpVersion: 8.2.12
  sshPort: 9837
  uniqueMod: '1'

  site1: ''
  siteId1: ''
  siteName1: ''
  siteFarmId1: ''
  siteEnvPrefix1: ''
  ResourceGroupName1: ''
  site2: ''
  siteId2: ''
  siteName2: ''
  siteFarmId2: ''
  siteEnvPrefix2: ''
  ResourceGroupName2: ''
  site3: ''
  siteId3: ''
  siteName3: ''
  siteFarmId3: ''
  siteEnvPrefix3: ''
  ResourceGroupName3: ''
  site4: ''
  siteId4: ''
  siteName4: ''
  siteFarmId4: ''
  siteEnvPrefix4: ''
  ResourceGroupName4: ''
  site5: ''
  siteId5: ''
  siteName5: ''
  siteFarmId5: ''
  siteEnvPrefix5: ''
  ResourceGroupName5: ''
  site6: ''
  siteId6: ''
  siteName6: ''
  siteFarmId6: ''
  siteEnvPrefix6: ''
  ResourceGroupName6: ''
  site7: ''
  siteId7: ''
  siteName7: ''
  siteFarmId7: ''
  siteEnvPrefix7: ''
  ResourceGroupName7: ''
  site8: ''
  siteId8: ''
  siteName8: ''
  siteFarmId8: ''
  siteEnvPrefix8: ''
  ResourceGroupName8: ''

  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    azureServiceConnection: 'UAT Resource Manager'
  ${{ elseif eq(variables['Build.SourceBranchName'], 'stage') }}:
    azureServiceConnection: 'UAT Resource Manager'
  ${{ else }}:
    azureServiceConnection: 'INT resource Manager'

stages:

  - stage: Test
    displayName: Test
    jobs:
      - job: Compile
        displayName: Compile code
        steps:
          - script: |
              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
              sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
              sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
              php -version
            displayName: 'Use PHP version $(phpVersion)'
          - script: composer install --no-interaction --prefer-dist
            displayName: 'Composer install'
      - job: Analyze
        displayName: Analyze code
        steps:
          - script: composer -n lint
            displayName: 'Lint php for syntax errors'
          - script: composer -n code-sniff
            displayName: 'Check coding standards'
          - script: composer -n unit-test
            displayName: 'Run unit tests'

  - stage: Build
    displayName: Build
    dependsOn: Test
    condition: and(succeeded('Test'), ne(variables['Build.SourceBranchName'], 'merge'))
    jobs:
      - job: Build
        displayName: Build image
        steps:
          - task: Docker@2
            displayName: Build
            inputs:
              command: build
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              tags: |
                latest
                $(tag)
              arguments: --label buildtype=nightly --build-arg GIT_REPO=$(gitRepo) --build-arg GIT_BRANCH=$(Build.SourceBranchName) --build-arg GIT_TAG=$(tag)
          - task: Docker@2
            displayName: Push to registry
            inputs:
              command: push
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              tags: |
                latest
                $(tag)

  - stage: Manifest
    displayName: Manifest
    dependsOn: Build
    condition: succeeded('Build')
    jobs:
      - job: ReadManifest
        displayName: Read manifest file
        steps:
          - script: |
              case $(Build.SourceBranchName) in
                master)
                  echo "##vso[task.setvariable variable=siteEnvPrefix;isOutput=true;]uat"
                  ;;
                stage)
                  echo "##vso[task.setvariable variable=siteEnvPrefix;isOutput=true;]uat"
                  ;;
                *)
                  echo "##vso[task.setvariable variable=siteEnvPrefix;isOutput=true;]int"
                  ;;
              esac
            displayName: 'Set Environment Prefix'
            name: EnvironmentPrefix

          - script: echo "$(EnvironmentPrefix.siteEnvPrefix)"
            displayName: 'Display Prefix'

          - script: |
              rm -rf $(Build.ArtifactStagingDirectory)/manifest.txt
              touch $(Build.ArtifactStagingDirectory)/manifest.txt

              rm -rf $(Build.ArtifactStagingDirectory)/build-image.txt
              echo $(tag) > $(Build.ArtifactStagingDirectory)/build-image.txt

              cp -r $(Build.SourcesDirectory)/.devops/scripts/trigger-release-build-pipeline.ps1 $(Build.ArtifactStagingDirectory)
            displayName: 'Initialize drop files'

      - job: ProcessSites1
        displayName: Process 1st set of sites
        dependsOn: ['ReadManifest']
        variables:
          siteEnvPrefixLocal: $[ dependencies.ReadManifest.outputs['EnvironmentPrefix.siteEnvPrefix'] ]
        steps:
          - ${{ each site in parameters.sites_1 }}:
            - script: |
                IFS='|'
                read -a siteInfo <<< "${{site}}"
                echo "${{site}}" >> $(Build.ArtifactStagingDirectory)/manifest.txt

                echo "CountyId: ${siteInfo[0]}"
                echo "CountyName : ${siteInfo[2]}"
                echo "FarmId : ${siteInfo[1]}"
                echo "##vso[task.setvariable variable=site1;]${{site}}"
                echo "##vso[task.setvariable variable=siteId1;]${siteInfo[2]}"
                echo "##vso[task.setvariable variable=siteFarmId1;]${siteInfo[1]}"
                echo "##vso[task.setvariable variable=siteName1;]${siteInfo[0]}"
                echo "##vso[task.setvariable variable=ResourceGroupName1;]-ctcms-df${siteInfo[1]}-app-rg"
              displayName: 'SITE: ${{ site }}'

            - template: /.devops/pipeline/_deploy-container.yml
              parameters:
                azureServiceConnection: $(azureServiceConnection)
                siteEnvPrefixLocal: $(siteEnvPrefixLocal)
                uniqueMod: $(uniqueMod)
                siteId: '$(siteEnvPrefixLocal)$(siteId1)'
                siteFarmId: $(siteFarmId1)
                containerRegistry: $(containerRegistry)
                sourceBranchName: $(Build.SourceBranchName)
                imageRepository: $(imageRepository)
                tag: $(tag)

      - job: ProcessSites2
        displayName: Process 2nd set of sites
        dependsOn: ['ReadManifest']
        variables:
          siteEnvPrefixLocal: $[ dependencies.ReadManifest.outputs['EnvironmentPrefix.siteEnvPrefix'] ]
        steps:
          - ${{ each site in parameters.sites_2 }}:
              - script: |
                  IFS='|'
                  read -a siteInfo <<< "${{site}}"
                  echo "${{site}}" >> $(Build.ArtifactStagingDirectory)/manifest.txt

                  echo "CountyId: ${siteInfo[0]}"
                  echo "CountyName : ${siteInfo[2]}"
                  echo "FarmId : ${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=site2;]${{site}}"
                  echo "##vso[task.setvariable variable=siteId2;]${siteInfo[2]}"
                  echo "##vso[task.setvariable variable=siteFarmId2;]${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=siteName2;]${siteInfo[0]}"
                  echo "##vso[task.setvariable variable=ResourceGroupName2;]-ctcms-df${siteInfo[1]}-app-rg"
                displayName: 'SITE: ${{ site }}'

              - template: /.devops/pipeline/_deploy-container.yml
                parameters:
                  azureServiceConnection: $(azureServiceConnection)
                  siteEnvPrefixLocal: $(siteEnvPrefixLocal)
                  uniqueMod: $(uniqueMod)
                  siteId: '$(siteEnvPrefixLocal)$(siteId2)'
                  siteFarmId: $(siteFarmId2)
                  containerRegistry: $(containerRegistry)
                  sourceBranchName: $(Build.SourceBranchName)
                  imageRepository: $(imageRepository)
                  tag: $(tag)

      - job: ProcessSites3
        displayName: Process 3rd set of sites
        dependsOn: ['ReadManifest']
        variables:
          siteEnvPrefixLocal: $[ dependencies.ReadManifest.outputs['EnvironmentPrefix.siteEnvPrefix'] ]
        steps:
          - ${{ each site in parameters.sites_3 }}:
              - script: |
                  IFS='|'
                  read -a siteInfo <<< "${{site}}"
                  echo "${{site}}" >> $(Build.ArtifactStagingDirectory)/manifest.txt

                  echo "CountyId: ${siteInfo[0]}"
                  echo "CountyName : ${siteInfo[2]}"
                  echo "FarmId : ${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=site3;]${{site}}"
                  echo "##vso[task.setvariable variable=siteId3;]${siteInfo[2]}"
                  echo "##vso[task.setvariable variable=siteFarmId3;]${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=siteName3;]${siteInfo[0]}"
                  echo "##vso[task.setvariable variable=ResourceGroupName3;]-ctcms-df${siteInfo[1]}-app-rg"
                displayName: 'SITE: ${{ site }}'

              - template: /.devops/pipeline/_deploy-container.yml
                parameters:
                  azureServiceConnection: $(azureServiceConnection)
                  siteEnvPrefixLocal: $(siteEnvPrefixLocal)
                  uniqueMod: $(uniqueMod)
                  siteId: '$(siteEnvPrefixLocal)$(siteId3)'
                  siteFarmId: $(siteFarmId3)
                  containerRegistry: $(containerRegistry)
                  sourceBranchName: $(Build.SourceBranchName)
                  imageRepository: $(imageRepository)
                  tag: $(tag)

      - job: ProcessSites4
        displayName: Process 4th set of sites
        dependsOn: ['ReadManifest']
        variables:
          siteEnvPrefixLocal: $[ dependencies.ReadManifest.outputs['EnvironmentPrefix.siteEnvPrefix'] ]
        steps:
          - ${{ each site in parameters.sites_4 }}:
              - script: |
                  IFS='|'
                  read -a siteInfo <<< "${{site}}"
                  echo "${{site}}" >> $(Build.ArtifactStagingDirectory)/manifest.txt

                  echo "CountyId: ${siteInfo[0]}"
                  echo "CountyName : ${siteInfo[2]}"
                  echo "FarmId : ${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=site4;]${{site}}"
                  echo "##vso[task.setvariable variable=siteId4;]${siteInfo[2]}"
                  echo "##vso[task.setvariable variable=siteFarmId4;]${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=siteName4;]${siteInfo[0]}"
                  echo "##vso[task.setvariable variable=ResourceGroupName4;]-ctcms-df${siteInfo[1]}-app-rg"
                displayName: 'SITE: ${{ site }}'

              - template: /.devops/pipeline/_deploy-container.yml
                parameters:
                  azureServiceConnection: $(azureServiceConnection)
                  siteEnvPrefixLocal: $(siteEnvPrefixLocal)
                  uniqueMod: $(uniqueMod)
                  siteId: '$(siteEnvPrefixLocal)$(siteId4)'
                  siteFarmId: $(siteFarmId4)
                  containerRegistry: $(containerRegistry)
                  sourceBranchName: $(Build.SourceBranchName)
                  imageRepository: $(imageRepository)
                  tag: $(tag)

      - job: ProcessSites5
        displayName: Process 5th set of sites
        dependsOn: ['ReadManifest']
        variables:
          siteEnvPrefixLocal: $[ dependencies.ReadManifest.outputs['EnvironmentPrefix.siteEnvPrefix'] ]
        steps:
          - ${{ each site in parameters.sites_5 }}:
              - script: |
                  IFS='|'
                  read -a siteInfo <<< "${{site}}"
                  echo "${{site}}" >> $(Build.ArtifactStagingDirectory)/manifest.txt

                  echo "CountyId: ${siteInfo[0]}"
                  echo "CountyName : ${siteInfo[2]}"
                  echo "FarmId : ${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=site5;]${{site}}"
                  echo "##vso[task.setvariable variable=siteId5;]${siteInfo[2]}"
                  echo "##vso[task.setvariable variable=siteFarmId5;]${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=siteName5;]${siteInfo[0]}"
                  echo "##vso[task.setvariable variable=ResourceGroupName5;]-ctcms-df${siteInfo[1]}-app-rg"
                displayName: 'SITE: ${{ site }}'

              - template: /.devops/pipeline/_deploy-container.yml
                parameters:
                  azureServiceConnection: $(azureServiceConnection)
                  siteEnvPrefixLocal: $(siteEnvPrefixLocal)
                  uniqueMod: $(uniqueMod)
                  siteId: '$(siteEnvPrefixLocal)$(siteId5)'
                  siteFarmId: $(siteFarmId5)
                  containerRegistry: $(containerRegistry)
                  sourceBranchName: $(Build.SourceBranchName)
                  imageRepository: $(imageRepository)
                  tag: $(tag)

      - job: ProcessSites6
        displayName: Process 6th set of sites
        dependsOn: ['ReadManifest']
        variables:
          siteEnvPrefixLocal: $[ dependencies.ReadManifest.outputs['EnvironmentPrefix.siteEnvPrefix'] ]
        steps:
          - ${{ each site in parameters.sites_6 }}:
              - script: |
                  IFS='|'
                  read -a siteInfo <<< "${{site}}"
                  echo "${{site}}" >> $(Build.ArtifactStagingDirectory)/manifest.txt

                  echo "CountyId: ${siteInfo[0]}"
                  echo "CountyName : ${siteInfo[2]}"
                  echo "FarmId : ${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=site6;]${{site}}"
                  echo "##vso[task.setvariable variable=siteId6;]${siteInfo[2]}"
                  echo "##vso[task.setvariable variable=siteFarmId6;]${siteInfo[1]}"
                  echo "##vso[task.setvariable variable=siteName6;]${siteInfo[0]}"
                  echo "##vso[task.setvariable variable=ResourceGroupName6;]-ctcms-df${siteInfo[1]}-app-rg"
                displayName: 'SITE: ${{ site }}'

              - template: /.devops/pipeline/_deploy-container.yml
                parameters:
                  azureServiceConnection: $(azureServiceConnection)
                  siteEnvPrefixLocal: $(siteEnvPrefixLocal)
                  uniqueMod: $(uniqueMod)
                  siteId: '$(siteEnvPrefixLocal)$(siteId6)'
                  siteFarmId: $(siteFarmId6)
                  containerRegistry: $(containerRegistry)
                  sourceBranchName: $(Build.SourceBranchName)
                  imageRepository: $(imageRepository)
                  tag: $(tag)

      - job: PublishArtifact
        displayName: Publish artifacts
        dependsOn: ['ReadManifest']
        variables:
          siteEnvPrefixLocal: $[ dependencies.ReadManifest.outputs['EnvironmentPrefix.siteEnvPrefix'] ]
        steps:
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
